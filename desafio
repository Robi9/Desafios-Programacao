//go
package main

func findNumbers(nums []int) int {
    var final []int
    for _, i := range(nums){
        aux :=  len(strconv.Itoa(i))%2
        if aux == 0 {
            final= append(final, i)
        }
    }
    return len(final)
    
}

//https://leetcode.com/problems/find-numbers-with-even-number-of-digits/
//c++ ENVIO 02
class Solution {
public:
    int findNumbers(vector<int>& nums) {
        vector<int> n;
        for (int i = 0; i < nums.size(); i++){
            if (((std::to_string(nums[i])).length())%2 == 0){
                n.push_back(nums[i]);
            }     
        }
        return n.size();
    }
};


//https://leetcode.com/problems/shuffle-the-array/
//ENVIO 01
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> aux;
        for(int i = 0; i < (nums.size())/2; i++){
            aux.push_back(nums[i]);
            aux.push_back(nums[i+n]);
        }
        return aux;
    }
    
};

//https://leetcode.com/problems/decompress-run-length-encoded-list/submissions/
//ENVIO 03
class Solution {
public:
    vector<int> decompressRLElist(vector<int>& nums) {
         vector<int> aux;
         int freq ;
         int val;
         int acc = 1;
         for(int i = 0; i < nums.size()/2; i++)   {
             freq = nums[2*i];
             val = nums[2*i+1];
             while(acc<=freq){
                 aux.push_back(val);
                 acc++;
             }
             acc=1;
         }
        return aux;
    }
};


//ENVIO 04
class Solution {
public:
    int countMatches(vector<vector<string>>& items, string ruleKey, string ruleValue) {
        int acc = 0;
        if (ruleKey == "type"){
            for(auto x : items){
                if(x[0] == ruleValue){
                    acc++;
                }
            }
            return acc;
        }else if (ruleKey == "color"){
            for(auto x : items){
                if(x[1] == ruleValue){
                    acc++;
                }
            }
            return acc;
        }else if (ruleKey == "name"){
            for(auto x : items){
                if(x[2] == ruleValue){
                    acc++;
                }
            }
            return acc;
        }
        
        return acc;
    }
};